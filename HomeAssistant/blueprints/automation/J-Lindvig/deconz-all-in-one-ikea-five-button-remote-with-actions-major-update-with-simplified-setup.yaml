blueprint:
  name: deCONZ - IKEA remote All-In-One remote with actions
  description: "This blueprint utilize a IKEA five button (puck) remote to control\
    \ a group of lights individually.\n\nREQUIREMENTS:\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\
    Since we need to store the current light choosen between each activation af the\
    \ automation, we are in need af of placeholder.\nFor this we are using a counter.\
    \ This can be configured in the or YAML.\nExample:\n\ncounter:\n  idx_livingroom:\n\
    \nThe counter only needs a enity_id - the rest is handled by the blueprint.\n\n\
    HOW THE REMOTE WORKS:\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\
    LEFT AND RIGHT:\nWith a short press on either the left/right arrow, you will be\
    \ able to switch between the light in the group. The current selected light give\
    \ a short flash indicating your selection.\nLong press is assignable to any action(s).\n\
    \nDIM UP OR DOWN:\nShort press will in/decrease brightness with the specified\
    \ step in percent and short transition time.\nLong pres will in/decrease brightness\
    \ continuesly using a transition time stating how long a dim from 0 to 100% shoiuld\
    \ take.\n\nPOWER:\nShort press toggles the selected light\nLong press turns on\
    \ ALL lights in the group at 100%\n\nHOW THE AUTOMATION WORKS:\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\
    We listen on \"deconz_event\" and extract the numeric representation of the pressed\
    \ button and duration.\n\nThe counter is updated with the ID of the current light.\n\
    Secondly we choose the appropriate action from the given event.\n\nUSING THE BLUEPRINT\
    \ IN YAML MODE:\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\
    If you decide to make the automation directly in YAML it would look like this:\n\
    \nautomation:\n  - alias: Kitchen and Livingroom\n    description: The All-in-One\
    \ remote formuse in the kitchen and the livingroom.\n    use_blueprint:\n    \
    \  path: J-Lindvig/all_in_one_remote.yaml\n      input:\n        long_press_transition:\
    \ '30'\n        remote: c08819d98af8b341299ea47c702e9a37\n        counter: counter.all_in_one_test_id\n\
    \        short_press_transition: '0.5'\n        dim_step_pct: '20'\n         \
    \ lights:\n            entity_id:\n              - light.dining_table\n      \
    \        - light.kitchen_sink\n              - light.livingroom\n"
  source_url: https://community.home-assistant.io/t/deconz-all-in-one-ikea-five-button-remote-with-actions-major-update-with-simplified-setup/267996
  domain: automation
  input:
    lights:
      name: Light(s)
      description: Choose the lights you wish to control
      selector:
        target:
          entity:
            domain: light
    remote:
      name: Remote
      description: IKEA five button remote to use
      selector:
        device:
          integration: deconz
          manufacturer: IKEA of Sweden
          model: TRADFRI remote control
    counter:
      name: ID holder
      description: The counter holding the ID of the current light
      selector:
        entity:
          domain: counter
    dim_step_pct:
      name: Step
      description: Step, in percent, to de- or increase brightness
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          mode: slider
          step: 5.0
          unit_of_measurement: '%'
    short_press_transition:
      name: Transition short
      description: Transtion time used when doing a short press
      default: 0.5
      selector:
        number:
          min: 0.0
          max: 2.0
          mode: slider
          step: 0.1
          unit_of_measurement: seconds
    long_press_transition:
      name: Transition long
      description: Transtion time used when doing a long press (0 - 100%)
      default: 30
      selector:
        number:
          min: 5.0
          max: 50.0
          mode: slider
          step: 1.0
          unit_of_measurement: seconds
    button_left_long:
      name: Left button - long press
      description: Action to run on long left button press
      default: []
      selector:
        action: {}
    button_right_long:
      name: Right button - long press
      description: Action to run on long right button press
      default: []
      selector:
        action: {}
mode: restart
max_exceeded: silent
variables:
  lights: !input 'lights'
  counter: !input 'counter'
  idx: 0
  dim_step_pct: !input 'dim_step_pct'
  dim_step: 0
  prev_state: ''
  prev_brightness: 0
  short_press_transition: !input 'short_press_transition'
  long_press_transition: !input 'long_press_transition'
trigger:
- platform: event
  event_type: deconz_event
  event_data:
    device_id: !input 'remote'
action:
- variables:
    event: '{{ trigger.event.data.event }}'
    lights: '{{ lights[''entity_id''] }}'
    idx: '{{ states(counter) }}'
    dim_step: '{{ (254 / (long_press_transition | int)) | round(0, ''floor'') }}'
- service: counter.configure
  data:
    entity_id: '{{ counter}}'
    maximum: '{{ lights | length - 1 }}'
- choose:
  - conditions: '{{ event in (4002, 5002) }}'
    sequence:
    - variables:
        idx: "{%- if event == 4002 -%}\n  {{ (idx - 1) if idx > 0 else state_attr(counter,\
          \ 'maximum') }}\n{%- else -%}\n  {{ (idx + 1) if idx < state_attr(counter,\
          \ 'maximum') else 0 }}\n{%- endif %}"
        prev_state: '{{ states(lights[idx]) }}'
    - service: counter.configure
      data:
        entity_id: '{{ counter }}'
        value: '{{ idx }}'
        initial: '{{ idx }}'
    - service: light.turn_on
      data:
        entity_id: '{{ lights[idx] }}'
    - variables:
        prev_brightness: '{{ state_attr(lights[idx], ''brightness'') | int }}'
    - repeat:
        count: 2
        sequence:
        - delay:
            milliseconds: 500
        - service: light.turn_off
          data:
            entity_id: '{{ lights[idx] }}'
        - delay:
            milliseconds: 500
        - service: light.turn_on
          data:
            entity_id: '{{ lights[idx] }}'
            brightness_pct: 100
    - service: light.turn_on
      data:
        entity_id: '{{ lights[idx] }}'
        brightness: '{{ prev_brightness | int }}'
    - delay: 1
    - service: light.turn_{{ prev_state }}
      data:
        entity_id: '{{ lights[idx] }}'
  - conditions: '{{ event == 1002 }}'
    sequence:
    - service: light.toggle
      data:
        entity_id: '{{ lights[idx] }}'
  - conditions: '{{ event == 1001 }}'
    sequence:
    - service: light.turn_on
      target: !input 'lights'
      data:
        brightness_pct: 100
  - conditions: '{{ event in (2002, 3002) }}'
    sequence:
    - service: light.turn_on
      data:
        entity_id: '{{ lights[idx] }}'
        brightness_step_pct: '{{ ( dim_step_pct | int ) if event == 2002 else (0 -
          ( dim_step_pct | int )) }}'
        transition: '{{ short_press_transition }}'
  - conditions: '{{ event in (2001, 3001) }}'
    sequence:
    - service: light.turn_on
      data:
        entity_id: '{{ lights[idx] }}'
    - repeat:
        while: []
        sequence:
        - service: light.turn_on
          data:
            entity_id: '{{ lights[idx] }}'
            brightness: '{{ state_attr(lights[idx], ''brightness'') + (0 - dim_step
              if event == 3001 else dim_step) }}'
        - delay: 1
  - conditions: '{{ event == 4001 }}'
    sequence: !input 'button_left_long'
  - conditions: '{{ event == 5001 }}'
    sequence: !input 'button_right_long'
